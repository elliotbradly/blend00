<?xml version="1.0"?>
<CSScriptData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ScriptType>CS1</ScriptType>
  <CompilerVersion>4</CompilerVersion>
  <ReferenceAssemblies>
    <string>System.dll</string>
    <string>System.Core.dll</string>
    <string>System.Data.dll</string>
    <string>System.Data.DataSetExtensions.dll</string>
    <string>System.Deployment.dll</string>
    <string>System.Drawing.dll</string>
    <string>System.Windows.Forms.dll</string>
    <string>System.Xml.dll</string>
    <string>System.Xml.Linq.dll</string>
    <string>Microsoft.CSharp.dll</string>
  </ReferenceAssemblies>
  <UsingText>using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using PEPlugin;
using PEPlugin.SDX;
using PEPlugin.Pmx;
using PEPlugin.Pmd;
using PEPlugin.Vmd;
using PEPlugin.Vme;
using PEPlugin.Form;
using PEPlugin.View;
using SlimDX;
using SlimDX.Direct3D9;
using IES = PEPlugin.Vme.IPEVmeEventState;
using IBS = PEPlugin.Vme.IPEVmeBoneState;
using ISS = PEPlugin.Vme.IPEVmeSingleValueState;
using IMS = PEPlugin.Vme.IPEVmeSingleValueState;
using ICS = PEPlugin.Vme.IPEVmeCameraState;
using ILS = PEPlugin.Vme.IPEVmeLightState;
</UsingText>
  <FullCodeText>
// using項目はメニューから一括管理(ここへの直接追記でも動作可能)

// Scriptプラグインクラス(クラス名変更不可)
public class CSScriptClass : PEPluginClass{
    // コンストラクタ
    public CSScriptClass() : base(){
        // 起動オプション
        // boot時実行(true/false), プラグインメニューへの登録(true/false), メニュー登録名("")
        m_option = new PEPluginOption(false, true, "モーフ棒自動生成");
    }

    // エントリポイント
    public override void Run(IPERunArgs args){
        try{
            // ここへ処理を追加してください.
            			
			//
			// ---- 簡易編集用ヘッダコード ----
			
			// 常用接続変数一括登録
			
			// ホスト配下
			IPEPluginHost host = args.Host;
			IPEBuilder builder = host.Builder;
			IPEShortBuilder bd = host.Builder.SC;		// 短絡系ビルダ
			IPXPmxBuilder bdx = host.Builder.Pmx;		// PMXビルダ
			IPEConnector connect = host.Connector;
			IPEPMDViewConnector view = host.Connector.View.PMDView;
			
			// PMX関連
			IPXPmx pmx = connect.Pmx.GetCurrentState();     // PMX取得
			IPXHeader header = pmx.Header;                  // header   :ヘッダ
			IPXModelInfo info = pmx.ModelInfo;              // info     :モデル情報
			IList&lt;IPXVertex&gt; vertex = pmx.Vertex;           // vertex   :頂点   | リスト
			IList&lt;IPXMaterial&gt; material = pmx.Material;     // material :材質   | リスト
			IList&lt;IPXBone&gt; bone = pmx.Bone;                 // bone     :ボーン | リスト
			IList&lt;IPXMorph&gt; morph = pmx.Morph;				// morph    :モーフ | リスト
			IList&lt;IPXNode&gt; node = pmx.Node;					// node     :表示枠 | リスト
			IList&lt;IPXBody&gt; body = pmx.Body;                 // body     :剛体   | リスト
			IList&lt;IPXJoint&gt; joint = pmx.Joint;              // joint    :Joint  | リスト

			// PMD関連

			//IPEPmd pmd = connect.Pmd.GetCurrentState();         // PMD取得
			//IPEXPmd pex = connect.Pmd.GetCurrentStateEx();       // 拡張PMDを使う場合はコメント解除(拡張用データへの接続変数は未登録)
			/*
			IPEHeader header = pmd.Header;                  // header   :ヘッダ
			IList&lt;IPEVertex&gt; vertex = pmd.Vertex;           // vertex   :頂点   | リスト
			IList&lt;int&gt; face = pmd.Face;                     // face     :面     | リスト
			IList&lt;IPEMaterial&gt; material = pmd.Material;     // material :材質   | リスト
			IList&lt;IPEBone&gt; bone = pmd.Bone;                 // bone     :ボーン | リスト
			IList&lt;IPEIK&gt; ik = pmd.IK;                       // ik       :IK     | リスト
			IList&lt;IPEExpression&gt; exp = pmd.Expression;      // exp      :表情   | リスト
			
			IList&lt;int&gt; frameExp = pmd.FrameExpression;      // frameExp :表情枠 | リスト
			IList&lt;IPEFrameBone&gt; frameBone = pmd.FrameBone;  // frameBone:ボーン表示枠 | リスト
			
			string[] toon = pmd.ToonName;                   // toon     :Toon   | 配列
			
			IList&lt;IPEBody&gt; body = pmd.Body;                 // body     :剛体   | リスト
			IList&lt;IPEJoint&gt; joint = pmd.Joint;              // joint    :Joint  | リスト
			*/
			
			// Run()関数内の処理を記述
			// 外部クラスの活用などは一般形式のスクリプトコードを使用してください.
			
			// プラグイン変数は IPERunArgs args を通して取得可能
			// コードに自動的に追加されるヘッダ／フッタはメニューから有効化／確認が可能(ヘッダは標準で有効設定)

			//モーフ棒Form表示
			MorphBar morphBar = new MorphBar(host);
			morphBar.Show();

			//閉じるボタンなら終了
			if(morphBar.DialogResult == DialogResult.Cancel){
				morphBar.Close();
				morphBar.Dispose();
				return;
			}

			//
			// ---- 簡易編集用フッタコード ----
			
			// 更新処理
			// デフォルト設定ではフッタコードはOFF
			
			// PMX更新
			//connect.Pmx.Update(newpmx);//コメントを外すと元モデルと入れ替え(テスト用)
			//connect.Pmx.Update(pmx);
			//connect.Pmd.UpdateEx(pex);
			/*
			// PMD更新
			connect.Pmd.Update(pmd);
			//connect.Pmd.UpdateEx(pex);
			*/
			
			// Form更新
			connect.Form.UpdateList(UpdateObject.All);  // 重い場合は引数を変更して個別に更新
			
			// PMDView更新
			connect.View.PMDView.UpdateModel();         // Viewの更新が不要な場合はコメントアウト
			connect.View.PMDView.UpdateView();
		}catch (Exception ex) {
			MessageBox.Show(ex.Message, "エラー", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
		}
	}
}

//モーフ棒自動生成クラス
public class MorphBar : Form{

	//PMX関連
	IPXPmxBuilder bdx = null;
	IPXPmx pmx = null;
	IPXPmx newpmx = null;
	IList&lt;IPXMorph&gt; morph = null;

	//テクスチャ画像サイズ
	int xSize = 1280;
	int ySize = 720;

	//カメラ座標
	int xCamera = 10;
	int yCamera = 10;
	int zCamera = -45;

	//視野角
	float viewangle = 30f;

	//文字列大きさ
	float maxWidth = 0;
	float maxHeight = 0;

	//フォント関連
	System.Drawing.Font f = null;
	StringFormat sf = null;
	FontDialog fd = null;
	SaveFileDialog savePmxDialog = null;
	RectangleF charRect;

	//Bitmap関連
	Bitmap bitmap = null; 
	Graphics g = null;
	Brush b = null;

	int lineSize = 0;

	//コントロール
	TextBox dummy = new TextBox();

	TextBox textBox1 = new TextBox();
	TextBox textBox2 = new TextBox();
	TextBox textBox3 = new TextBox();
	TextBox textBox4 = new TextBox();
	TextBox textBox5 = new TextBox();
	TextBox textBox6 = new TextBox();

	protected PictureBox pictureBox = new PictureBox();

	public Button btnFont = new Button ();
	public Button btnOK = new Button ();

	//コンストラクタ
	public MorphBar(IPEPluginHost host){
		bdx = host.Builder.Pmx;		// PMXビルダ
		pmx = host.Connector.Pmx.GetCurrentState();     // PMX取得
		morph = pmx.Morph;				// morph    :モーフ | リスト
		newpmx = bdx.Pmx();
		bitmap = new Bitmap(xSize, ySize); 
		g = Graphics.FromImage(bitmap);
		pictureBox.Image = bitmap;
		sf = new StringFormat();
		RectangleF charRect = new RectangleF(0,0,0,0);
		b = new SolidBrush(Color.FromArgb(255,0,0,0));

		this.Text = "モーフ棒自動生成";
		this.FormBorderStyle = FormBorderStyle.FixedDialog;
		this.MaximizeBox = false;
		this.MinimizeBox = false;
		this.AcceptButton = btnOK;
		this.StartPosition = FormStartPosition.CenterScreen;
		this.FormClosing += new FormClosingEventHandler(MorphBar_Close);

		dummy.Text = "0000";
		dummy.Size = dummy.GetPreferredSize(Size.Empty);
		lineSize = dummy.Height;

		Label label1 = new Label();
		label1.Text = "テクスチャサイズ：";
		label1.Size = label1.GetPreferredSize(Size.Empty);
		label1.Location = new Point (lineSize/2,lineSize-label1.Height/2);
		this.Controls.Add(label1);

		textBox1.Text = "1280";
		textBox1.Size = dummy.Size;
		textBox1.Location = getNextLocation(label1,textBox1,lineSize/2);
		textBox1.TextChanged += new EventHandler(this.textBox_TextChanged );
		this.Controls.Add(textBox1);

		textBox2.Text = "720";
		textBox2.Size = dummy.Size;
		textBox2.Location = getNextLocation(textBox1,textBox2,lineSize/2);
		textBox2.TextChanged += new EventHandler(this.textBox_TextChanged );
		this.Controls.Add(textBox2);

		Label label2 = new Label();
		label2.Text = "カメラ位置：";
		label2.Size = label2.GetPreferredSize(Size.Empty);
		label2.Location = getNextLine(label1,label2,lineSize/2);
		this.Controls.Add(label2);

		textBox3.Text = "0";
		textBox3.Size = dummy.Size;
		textBox3.Location = getNextLocation(label2,textBox3,lineSize/2);
		textBox3.TextChanged += new EventHandler(this.textBox_TextChanged2 );
		this.Controls.Add(textBox3);

		textBox4.Text = "10";
		textBox4.Size = dummy.Size;
		textBox4.Location = getNextLocation(textBox3,textBox4,lineSize/2);
		textBox4.TextChanged += new EventHandler(this.textBox_TextChanged2 );
		this.Controls.Add(textBox4);

		textBox5.Text = "-45";
		textBox5.Size = dummy.Size;
		textBox5.Location = getNextLocation(textBox4,textBox5,lineSize/2);
		textBox5.TextChanged += new EventHandler(this.textBox_TextChanged2 );
		this.Controls.Add(textBox5);

		Label label3 = new Label();
		label3.Text = "視野角：";
		label3.Size = label3.GetPreferredSize(Size.Empty);
		label3.Location = getNextLocation(textBox5,label3,lineSize/2);
		this.Controls.Add(label3);

		textBox6.Text = "30";
		textBox6.Size = dummy.Size;
		textBox6.Location = getNextLocation(label3,textBox6,lineSize/2);
		textBox6.TextChanged += new EventHandler(this.textBox_TextChanged2 );
		this.Controls.Add(textBox6);

		pictureBox.Size = new Size(320,ySize*320/xSize);
		pictureBox.BorderStyle = BorderStyle.Fixed3D;
		pictureBox.Location = getNextLine(label2,pictureBox,lineSize/2);
		pictureBox.TabStop = false;
		pictureBox.BackColor = Color.White;
		this.Controls.Add(pictureBox);
		pictureBox.Click += new EventHandler(this.picture_Click );

		btnFont.Click += new EventHandler(this.button_Font );
		btnFont.Text = "フォント設定";
		btnFont.Location = getNextLine(pictureBox,btnFont,lineSize/2);
		this.Controls.Add(btnFont);

		btnOK.Click += new EventHandler(this.button_Save );
		btnOK.Text = "保存";
		btnOK.Location = getNextLocation(btnFont,btnOK,lineSize/2);
		btnOK.DialogResult = DialogResult.OK;
		this.Controls.Add(btnOK);

		this.Size = this.GetPreferredSize(Size.Empty);
		this.Width += lineSize/2;
		this.Height += lineSize/2;

		fd = new FontDialog();
		savePmxDialog = new SaveFileDialog();

		preview();
	}

	//指定コントロールの左側座標取得
	public Point getNextLocation(Control parent,Control child,int margin){
		int x = parent.Location.X + parent.Width + margin;
		int y = parent.Location.Y + parent.Height/2 - child.Height/2;
		return(new Point(x,y));
	}

	//指定コントロールの下側座標取得
	public Point getNextLine(Control parent,Control child,int margin){
		int x = parent.Location.X;
		int y = parent.Location.Y + parent.Height + margin;
		return(new Point(x,y));
	}

	//テクスチャ画像作成
	public void preview(){

		draw();

		//フォントサイズ指定
		int linenum = (morph.Count+1)/2;//縦に表示できる最大モーフ数
		float fontsize = ySize/(linenum+1f);//フォントの高さ//1個分マージン

		if(fontsize &gt; 20){
			fontsize = 20;
			linenum = (int)(ySize/fontsize)-1;
		}//最大値は20

		if(fontsize &lt; 1){
			fontsize = 1;
			linenum = (int)(ySize/fontsize)-1;
		}//最小値は1

		float offsety = (ySize-linenum*fontsize)/2;
		float offsetx = fontsize/2;

		//描画文字列長(Pixel)の最大値
		maxWidth = 0;
		maxHeight = 0;
		for (int i = 0; i &lt; morph.Count; i++){
			SizeF sSize = g.MeasureString(morph[i].Name, f, 1000, sf);
			if(sSize.Width  &gt; maxWidth ){ maxWidth  = (int)sSize.Width;  }
			if(sSize.Height &gt; maxHeight){ maxHeight = (int)sSize.Height; }
		}

		float sx = (offsetx+maxWidth);
		float sw = 0.9f * fontsize*4;
		float sh = 0.8f * fontsize;

		//左側モーフ棒描画
		for (int i = 0; i &lt; linenum; i++){
			if(i &gt;= morph.Count) break;
			float sy = offsety+i*fontsize;
			if(morph[i].Panel == 0){ ((SolidBrush)b).Color = Color.FromArgb(128, 159,159,159); }
			if(morph[i].Panel == 1){ ((SolidBrush)b).Color = Color.FromArgb(255, 157,196,107); }
			if(morph[i].Panel == 2){ ((SolidBrush)b).Color = Color.FromArgb(255, 102,157,184); }
			if(morph[i].Panel == 3){ ((SolidBrush)b).Color = Color.FromArgb(255, 196,107,120); }
			if(morph[i].Panel == 4){ ((SolidBrush)b).Color = Color.FromArgb(255, 159,159,159); }
			g.FillRectangle(b, sx, sy, sw, sh);
		}

		sx = xSize-(offsetx+maxWidth)-sw;

		//右側モーフ棒描画
		for (int i = 0; i &lt; linenum; i++){
			if(linenum+i &gt;= morph.Count) break;
			float sy = offsety+i*fontsize;
			if(morph[linenum+i].Panel == 0){ ((SolidBrush)b).Color = Color.FromArgb(128, 159,159,159); }
			if(morph[linenum+i].Panel == 1){ ((SolidBrush)b).Color = Color.FromArgb(255, 157,196,107); }
			if(morph[linenum+i].Panel == 2){ ((SolidBrush)b).Color = Color.FromArgb(255, 102,157,184); }
			if(morph[linenum+i].Panel == 3){ ((SolidBrush)b).Color = Color.FromArgb(255, 196,107,120); }
			if(morph[linenum+i].Panel == 4){ ((SolidBrush)b).Color = Color.FromArgb(255, 159,159,159); }
			g.FillRectangle(b, sx, sy, sw, sh);
		}
		pictureBox.Refresh();
	}

	//テクスチャ画像作成
	public void draw(){

		g.Clear(Color.Transparent);

		//フォントサイズ指定
		int linenum = (morph.Count+1)/2;//縦に表示できる最大モーフ数

		float fontsize = ySize/(linenum+1f);//フォントの高さ//1個分マージン

		if(fontsize &gt; 20){
			fontsize = 20;
			linenum = (int)(ySize/fontsize)-1;
		}//最大値は20

		if(fontsize &lt; 1){
			fontsize = 1;
			linenum = (int)(ySize/fontsize)-1;
		}//最小値は1

		float offsety = (ySize-linenum*fontsize)/2;
		float offsetx = fontsize/2;

		((SolidBrush)b).Color = Color.FromArgb(255, fd.Color);		//透明背景設定
		f = fd.Font;

		//描画文字列長(Pixel)の最大値

		maxWidth = 0;
		maxHeight = 0;
		for (int i = 0; i &lt; morph.Count; i++){
			SizeF sSize = g.MeasureString(morph[i].Name, f, 1000, sf);
			if(sSize.Width  &gt; maxWidth ){ maxWidth  = (int)sSize.Width;  }
			if(sSize.Height &gt; maxHeight){ maxHeight = (int)sSize.Height; }
		}

		//左側モーフ名描画
		for (int i = 0; i &lt; linenum; i++){
			if(i &gt;= morph.Count) break;
			//文字列の横幅(Pixel)取得
			SizeF stringSize = g.MeasureString(morph[i].Name, f, 1000, sf);
			if(morph[i].Panel == 0){
				((SolidBrush)b).Color = Color.FromArgb(128, fd.Color);		//透明背景設定
			}else{
				((SolidBrush)b).Color = Color.FromArgb(255, fd.Color);		//透明背景設定
			}
			g.DrawString(morph[i].Name, f, b, (offsetx+maxWidth)-stringSize.Width, offsety+fontsize/2-stringSize.Height/2+i*fontsize);
		}

		//右側モーフ名描画
		for (int i = 0; i &lt; linenum; i++){
			if(linenum+i &gt;= morph.Count) break;
			//文字列の横幅(Pixel)取得
			SizeF stringSize = g.MeasureString(morph[i].Name, f, 1000, sf);
			if(morph[linenum+i].Panel == 0){
				((SolidBrush)b).Color = Color.FromArgb(128, fd.Color);		//透明背景設定
			}else{
				((SolidBrush)b).Color = Color.FromArgb(255, fd.Color);		//透明背景設定
			}
			g.DrawString(morph[linenum+i].Name, f, b, xSize-(offsetx+maxWidth), offsety+fontsize/2-stringSize.Height/2+i*fontsize);
		}

		pictureBox.Refresh();
	}

	//モーフ棒モデル作成
	public void buildModel(){

		float yModelSize = (float)(Math.Tan(Math.PI * viewangle/2 / 180.0f)*(-zCamera))*2;
		float xModelSize = xSize*yModelSize/ySize;

		//フォントサイズ指定
		int linenum = (morph.Count+1)/2;//縦に表示できる最大モーフ数
		float fontsize = ySize/(linenum+1f);//フォントの高さ//1個分マージン

		if(fontsize &gt; 20){
			fontsize = 20;
			linenum = (int)(ySize/fontsize)-1;
		}//最大値は20

		if(fontsize &lt; 1){
			fontsize = 1;
			linenum = (int)(ySize/fontsize)-1;
		}//最小値は1

		float offsety = (ySize-linenum*fontsize)/2;
		float offsetx = fontsize/2;

		//描画文字列長(Pixel)の最大値
		int maxWidth = 0;
		int maxHeight = 0;
		for (int i = 0; i &lt; morph.Count; i++){
			SizeF sSize = g.MeasureString(morph[i].Name, f, 1000, sf);
			if(sSize.Width  &gt; maxWidth ){ maxWidth  = (int)sSize.Width;  }
			if(sSize.Height &gt; maxHeight){ maxHeight = (int)sSize.Height; }
		}

		newpmx.Clear();//初期化
		newpmx.ModelInfo.ModelName = "モーフ棒("+pmx.ModelInfo.ModelName+"用)";
		newpmx.ModelInfo.Comment = "モーフ棒("+pmx.ModelInfo.ModelName+"用)\nモーフ棒自動生成プラグインにて自動生成";

		//材質作成
		IPXMaterial matScreen  = buildMaterial(bdx,"文字"  ,new V3(0.80f,0.80f,0.80f));
		IPXMaterial matNothing  = buildMaterial(bdx,"予約"  ,new V3(0.71f,0.71f,0.71f));
		IPXMaterial matEyebrow = buildMaterial(bdx,"まゆ"  ,new V3(0.69f,1.00f,0.30f));
		IPXMaterial matEye     = buildMaterial(bdx,"目"    ,new V3(0.26f,0.69f,0.90f));
		IPXMaterial matRip     = buildMaterial(bdx,"リップ",new V3(1.00f,0.30f,0.40f));
		IPXMaterial matOthers  = buildMaterial(bdx,"その他",new V3(0.71f,0.71f,0.71f));

		matNothing.Diffuse.A = 0.5f;

		//PMXに材質追加
		IList&lt;IPXMaterial&gt; newmaterial = newpmx.Material;
		newmaterial.Add(matScreen);
		newmaterial.Add(matNothing);
		newmaterial.Add(matEyebrow);
		newmaterial.Add(matEye);
		newmaterial.Add(matRip);
		newmaterial.Add(matOthers);

		//テクスチャ名指定
		matScreen.Tex = "未指定.png";

		//文字スクリーン頂点追加
		IPXVertex v1 = AddVertex(newpmx,bdx,-xModelSize/2, yModelSize/2+yCamera,0,0,0);
		IPXVertex v2 = AddVertex(newpmx,bdx,-xModelSize/2,-yModelSize/2+yCamera,0,0,1);
		IPXVertex v3 = AddVertex(newpmx,bdx, xModelSize/2, yModelSize/2+yCamera,0,1,0);
		IPXVertex v4 = AddVertex(newpmx,bdx, xModelSize/2,-yModelSize/2+yCamera,0,1,1);

		//文字スクリーン面追加
		IPXFace f1 = AddFace(matScreen,bdx,v1,v3,v2);
		IPXFace f2 = AddFace(matScreen,bdx,v2,v3,v4);

		float sx = xModelSize * ((offsetx+maxWidth)+fontsize*2) / xSize -xModelSize/2;
		float sw = xModelSize*0.9f * fontsize*4 / xSize;
		float sh = yModelSize*0.8f * fontsize / ySize;

		IPXMaterial mat = null;

		//左側モーフ棒作成
		for (int i = 0; i &lt; linenum; i++){
			if(i &gt;= morph.Count) break;

			if(morph[i].Panel == 0){ mat = matNothing; }
			if(morph[i].Panel == 1){ mat = matEyebrow; }
			if(morph[i].Panel == 2){ mat = matEye; }
			if(morph[i].Panel == 3){ mat = matRip; }
			if(morph[i].Panel == 4){ mat = matOthers; }

			float sy = yModelSize * (offsety+i*fontsize+fontsize/2) / ySize -yModelSize/2;
			sy = -sy;//上下反転

			IPXVertex bv1 = AddVertex(newpmx,bdx,sx-sw/2,yCamera+sy+sh/2,-0.1f,0,0);
			IPXVertex bv2 = AddVertex(newpmx,bdx,sx-sw/2,yCamera+sy-sh/2,-0.1f,0,1);
			IPXVertex bv3 = AddVertex(newpmx,bdx,sx-sw/2,yCamera+sy+sh/2,-0.1f,1,0);
			IPXVertex bv4 = AddVertex(newpmx,bdx,sx-sw/2,yCamera+sy-sh/2,-0.1f,1,1);

			IPXFace bf1 = AddFace(mat,bdx,bv1,bv3,bv2);
			IPXFace bf2 = AddFace(mat,bdx,bv2,bv3,bv4);

			//頂点モーフ追加
			IPXMorph vm = bdx.Morph();
			vm.Name = morph[i].Name;
			vm.Panel = morph[i].Panel;
			vm.Kind = PEPlugin.Pmx.MorphKind.Vertex;
			newpmx.Morph.Add(vm);//実体登録

			if(morph[i].Panel != 0){
				IPXMorphNodeItem nodeItem = bdx.MorphNodeItem(vm);
				newpmx.ExpressionNode.Items.Add(nodeItem);//表示枠登録
			}

			//モーフ要素追加(頂点1)
			IPXVertexMorphOffset off1 = bdx.VertexMorphOffset();
			off1.Vertex = bv3;
			off1.Offset = new V3(sw,0,0);
			vm.Offsets.Add(off1);

			//モーフ要素追加(頂点2)
			IPXVertexMorphOffset off2 = bdx.VertexMorphOffset();
			off2.Vertex = bv4;
			off2.Offset = new V3(sw,0,0);
			vm.Offsets.Add(off2);
		}

		sx = xModelSize * (xSize-(offsetx+maxWidth)-fontsize*2) / xSize -xModelSize/2;

		//右側モーフ棒作成
		for (int i = 0; i &lt; linenum; i++){
			if(linenum+i &gt;= morph.Count) break;

			//IPXMaterial mat = null;
			if(morph[linenum+i].Panel == 0){ mat = matNothing; }
			if(morph[linenum+i].Panel == 1){ mat = matEyebrow; }
			if(morph[linenum+i].Panel == 2){ mat = matEye; }
			if(morph[linenum+i].Panel == 3){ mat = matRip; }
			if(morph[linenum+i].Panel == 4){ mat = matOthers; }

			float sy = yModelSize * ((offsety+i*fontsize)+fontsize/2) / ySize -yModelSize/2;
			sy = -sy;//上下反転

			IPXVertex bv1 = AddVertex(newpmx,bdx,sx+sw/2,yCamera+sy+sh/2,-0.1f,0,0);
			IPXVertex bv2 = AddVertex(newpmx,bdx,sx+sw/2,yCamera+sy-sh/2,-0.1f,0,1);
			IPXVertex bv3 = AddVertex(newpmx,bdx,sx+sw/2,yCamera+sy+sh/2,-0.1f,1,0);
			IPXVertex bv4 = AddVertex(newpmx,bdx,sx+sw/2,yCamera+sy-sh/2,-0.1f,1,1);

			IPXFace bf1 = AddFace(mat,bdx,bv1,bv3,bv2);
			IPXFace bf2 = AddFace(mat,bdx,bv2,bv3,bv4);

			//頂点モーフ追加
			IPXMorph vm = bdx.Morph();
			vm.Name = morph[linenum+i].Name;
			vm.Panel = morph[linenum+i].Panel;
			vm.Kind = PEPlugin.Pmx.MorphKind.Vertex;
			newpmx.Morph.Add(vm);//実体登録

			if(morph[linenum+i].Panel != 0){
				IPXMorphNodeItem nodeItem = bdx.MorphNodeItem(vm);
				newpmx.ExpressionNode.Items.Add(nodeItem);//表示枠登録
			}

			//モーフ要素追加(頂点1)
			IPXVertexMorphOffset off1 = bdx.VertexMorphOffset();
			off1.Vertex = bv1;
			off1.Offset = new V3(-sw/2*2,0,0);
			vm.Offsets.Add(off1);

			//モーフ要素追加(頂点2)
			IPXVertexMorphOffset off2 = bdx.VertexMorphOffset();
			off2.Vertex = bv2;
			off2.Offset = new V3(-sw/2*2,0,0);
			vm.Offsets.Add(off2);
		}
	}

	//数値変更イベント(再描画あり)
	public void textBox_TextChanged(object sender, EventArgs e){
		try{
			xSize = int.Parse(textBox1.Text);
			ySize = int.Parse(textBox2.Text);
		}catch (Exception ex) {
			MessageBox.Show(ex.Message, "エラー", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
		}

		if(xSize &lt; 1) xSize = 1;
		if(ySize &lt; 1) ySize = 1;

		if(bitmap != null){
			//g.Dispose();
			bitmap.Dispose();
		}
		bitmap = new Bitmap(xSize, ySize);
		g = Graphics.FromImage(bitmap);
		pictureBox.Image = bitmap;
		int picY = ySize*320/xSize;
		if(picY &lt; 1) picY = 1;

		if(picY &gt; 320){
			pictureBox.Size = new Size(320*320/picY,picY*320/picY);
		}else{
			pictureBox.Size = new Size(320,picY);
		}

		btnFont.Location = getNextLine(pictureBox,btnFont,lineSize/2);
		btnOK.Location = getNextLocation(btnFont,btnOK,lineSize/2);

		this.Size = this.GetPreferredSize(Size.Empty);

		this.Width += lineSize/2;
		this.Height += lineSize/2;

		preview();
	}

	//数値変更イベント(再描画なし)
	public void textBox_TextChanged2(object sender, EventArgs e){
		try{
			xCamera = int.Parse(textBox3.Text);
			yCamera = int.Parse(textBox4.Text);
			zCamera = int.Parse(textBox5.Text);
			viewangle = int.Parse(textBox6.Text);
		}catch (Exception ex) {
			MessageBox.Show(ex.Message, "エラー", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
		}
	}

	//画像クリックイベント
	public void picture_Click(object sender, EventArgs e){
		if(pictureBox.SizeMode == PictureBoxSizeMode.Normal){
			pictureBox.SizeMode = PictureBoxSizeMode.StretchImage;
		}else{
			pictureBox.SizeMode = PictureBoxSizeMode.Normal;
		}
	}

	//終了イベント
	public void MorphBar_Close(object sender, EventArgs e){
		g.Dispose();
		bitmap.Dispose();
		b.Dispose();
		fd.Dispose();
		savePmxDialog.Dispose();
	}

	//FontDialog作成
	public void button_Font(object sender, EventArgs e){

		fd.MaxSize = 20;
		fd.MinSize = 1;
		fd.FontMustExist = true;
		fd.AllowVerticalFonts = false;
		fd.ShowColor = true;

		//FontDialogの表示
		if(fd.ShowDialog() == DialogResult.OK){
			preview();
		}
	}

	//SaveFileDialog作成
	public void button_Save(object sender, EventArgs e){

		draw();
		//preview();
		buildModel();
		savePmxDialog.Filter = "PMXファイル(*.pmx)|*.pmx|すべてのファイル(*.*)|*.*";
		savePmxDialog.FilterIndex = 1;
		savePmxDialog.Title = "保存先のファイル名を入力してください";
		savePmxDialog.RestoreDirectory = true;
		savePmxDialog.FileName = "モーフ棒("+pmx.ModelInfo.ModelName+"用).pmx";

		//SaveFileDialogの表示
		if(savePmxDialog.ShowDialog() == DialogResult.OK){

			//生成テクスチャをpngファイルに保存
			String path = System.IO.Path.GetDirectoryName(savePmxDialog.FileName)+"\\";
			String filename = System.IO.Path.GetFileNameWithoutExtension(savePmxDialog.FileName)+".png";

			//材質のテクスチャ名指定
			IPXMaterial texmat = getMaterialByName(newpmx.Material,"文字");
			texmat.Tex = filename;
			bitmap.Save(path+filename, System.Drawing.Imaging.ImageFormat.Png);

			//PMX保存
			newpmx.ToFile(savePmxDialog.FileName);

			MessageBox.Show("PMXファイルの保存が完了しました。", "正常終了", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
		}
		preview();
	}

	private IPXVertex AddVertex(IPXPmx pmx,IPXPmxBuilder bdx,float x,float y,float z,float u,float v){
		IPXVertex vertex = bdx.Vertex();
		vertex.Position = new V3(x,y,z);
		vertex.UV = new V2(u,v);
		pmx.Vertex.Add(vertex);
		return(vertex);
	}

	private IPXFace AddFace(IPXMaterial mat,IPXPmxBuilder bdx,IPXVertex v1,IPXVertex v2,IPXVertex v3){
		IPXFace face = bdx.Face();
		face.Vertex1 = v1;
		face.Vertex2 = v2;
		face.Vertex3 = v3;
		mat.Faces.Add(face);
		return(face);
	}

	private int getMaterialIndexByName(IList&lt;IPXMaterial&gt; material,String name){
		int i=0;
		for(;i&lt;material.Count;i++){
			if(material[i].Name == name) break;
		}
		return(i);
	}

	private IPXMaterial getMaterialByName(IList&lt;IPXMaterial&gt; material,String name){
		int i=0;
		for(;i&lt;material.Count;i++){
			if(material[i].Name == name) break;
		}
		return(material[i]);
	}

	private IPXMaterial buildMaterial(IPXPmxBuilder bdx,String name,V3 pos){
		IPXMaterial mat = bdx.Material();
		mat.Name = name;
		mat.Diffuse = new V4(pos.X,pos.Y,pos.Z,1);
		mat.Ambient = new V3(0.2f,0.2f,0.2f);
		return(mat);
	}
}
</FullCodeText>
  <CodeText>
// Run()関数内の処理を記述
// 外部クラスの活用などは一般形式のスクリプトコードを使用してください.

// プラグイン変数は IPERunArgs args を通して取得可能
// コードに自動的に追加されるヘッダ／フッタはメニューから有効化／確認が可能(ヘッダは標準で有効設定)


</CodeText>
  <CodeHeader>//
// ---- 簡易編集用ヘッダコード ----

// 常用接続変数一括登録

// ホスト配下
IPEPluginHost host = args.Host;
IPEBuilder builder = host.Builder;
IPEShortBuilder bd = host.Builder.SC;		// 短絡系ビルダ
IPXPmxBuilder bdx = host.Builder.Pmx;		// PMXビルダ
IPEConnector connect = host.Connector;
IPEPMDViewConnector view = host.Connector.View.PMDView;

// PMX関連

IPXPmx pmx = connect.Pmx.GetCurrentState();     // PMX取得
IPXHeader header = pmx.Header;                  // header   :ヘッダ
IPXModelInfo info = pmx.ModelInfo;              // info     :モデル情報
IList&lt;IPXVertex&gt; vertex = pmx.Vertex;           // vertex   :頂点   | リスト
IList&lt;IPXMaterial&gt; material = pmx.Material;     // material :材質   | リスト
IList&lt;IPXBone&gt; bone = pmx.Bone;                 // bone     :ボーン | リスト
IList&lt;IPXMorph&gt; morph = pmx.Morph;				// morph    :モーフ | リスト
IList&lt;IPXNode&gt; node = pmx.Node;					// node     :表示枠 | リスト
IList&lt;IPXBody&gt; body = pmx.Body;                 // body     :剛体   | リスト
IList&lt;IPXJoint&gt; joint = pmx.Joint;              // joint    :Joint  | リスト


/*
// PMD関連

IPEPmd pmd = connect.Pmd.GetCurrentState();         // PMD取得
// IPEXPmd pex = connect.Pmd.GetCurrentStateEx();       // 拡張PMDを使う場合はコメント解除(拡張用データへの接続変数は未登録)

IPEHeader header = pmd.Header;                  // header   :ヘッダ
IList&lt;IPEVertex&gt; vertex = pmd.Vertex;           // vertex   :頂点   | リスト
IList&lt;int&gt; face = pmd.Face;                     // face     :面     | リスト
IList&lt;IPEMaterial&gt; material = pmd.Material;     // material :材質   | リスト
IList&lt;IPEBone&gt; bone = pmd.Bone;                 // bone     :ボーン | リスト
IList&lt;IPEIK&gt; ik = pmd.IK;                       // ik       :IK     | リスト
IList&lt;IPEExpression&gt; exp = pmd.Expression;      // exp      :表情   | リスト

IList&lt;int&gt; frameExp = pmd.FrameExpression;      // frameExp :表情枠 | リスト
IList&lt;IPEFrameBone&gt; frameBone = pmd.FrameBone;  // frameBone:ボーン表示枠 | リスト

string[] toon = pmd.ToonName;                   // toon     :Toon   | 配列

IList&lt;IPEBody&gt; body = pmd.Body;                 // body     :剛体   | リスト
IList&lt;IPEJoint&gt; joint = pmd.Joint;              // joint    :Joint  | リスト
*/

</CodeHeader>
  <CodeFooter>//
// ---- 簡易編集用フッタコード ----

// 更新処理
// デフォルト設定ではフッタコードはOFF

// PMX更新
connect.Pmx.Update(pmx);

/*
// PMD更新
connect.Pmd.Update(pmd);
//connect.Pmd.UpdateEx(pex);
*/

// Form更新
connect.Form.UpdateList(UpdateObject.All);  // 重い場合は引数を変更して個別に更新

// PMDView更新
connect.View.PMDView.UpdateModel();         // Viewの更新が不要な場合はコメントアウト
connect.View.PMDView.UpdateView();


</CodeFooter>
  <EnableHeader>true</EnableHeader>
  <EnableFooter>true</EnableFooter>
  <ActivePages>0</ActivePages>
</CSScriptData>