<?xml version="1.0"?>
<CSScriptData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ScriptType>CS1</ScriptType>
  <CompilerVersion>4</CompilerVersion>
  <ReferenceAssemblies>
    <string>System.dll</string>
    <string>System.Core.dll</string>
    <string>System.Data.dll</string>
    <string>System.Data.DataSetExtensions.dll</string>
    <string>System.Deployment.dll</string>
    <string>System.Drawing.dll</string>
    <string>System.Windows.Forms.dll</string>
    <string>System.Xml.dll</string>
    <string>System.Xml.Linq.dll</string>
    <string>Microsoft.CSharp.dll</string>
  </ReferenceAssemblies>
  <UsingText>using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using PEPlugin;
using PEPlugin.SDX;
using PEPlugin.Pmx;
using PEPlugin.Pmd;
using PEPlugin.Vmd;
using PEPlugin.Vme;
using PEPlugin.Form;
using PEPlugin.View;
using SlimDX;
using SlimDX.Direct3D9;
using IES = PEPlugin.Vme.IPEVmeEventState;
using IBS = PEPlugin.Vme.IPEVmeBoneState;
using ISS = PEPlugin.Vme.IPEVmeSingleValueState;
using IMS = PEPlugin.Vme.IPEVmeSingleValueState;
using ICS = PEPlugin.Vme.IPEVmeCameraState;
using ILS = PEPlugin.Vme.IPEVmeLightState;
</UsingText>
  <FullCodeText>public class CSScriptClass : PEPluginClass
    {
        public CSScriptClass()
            : base()
        {
            // 起動オプション
            // boot時実行(true/false), プラグインメニューへの登録(true/false), メニュー登録名("")
            m_option = new PEPluginOption(false, true, "UV展開図");
        }
        // エントリポイント
        public override void Run(IPERunArgs args)
        {
            try
            {
                Form1 fm = new Form1(args);
                fm.Show();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "エラー", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }

        }


    }

public partial class MyPluginBaseForm : Form
    {
        protected IPERunArgs args;
        protected IPEPluginHost host;
        protected IPEBuilder builder;
        protected IPEShortBuilder bd;             // 短絡系ビルダ
        protected IPXPmxBuilder bdx;              // PMXビルダ
        protected IPEConnector connect;
        protected IPEPMDViewConnector view;
        protected IPXPmx pmx;                     // PMX取得
        protected IPXHeader header;               // header   :ヘッダ
        protected IPXModelInfo info;              // info     :モデル情報
        protected IList&lt;IPXVertex&gt; vertex;        // vertex   :頂点   | リスト
        protected IList&lt;IPXMaterial&gt; material;    // material :材質   | リスト
        protected IList&lt;IPXBone&gt; bone;            // bone     :ボーン | リスト
        protected IList&lt;IPXMorph&gt; morph;          // morph    :モーフ | リスト
        protected IList&lt;IPXNode&gt; node;            // node     :表示枠 | リスト
        protected IList&lt;IPXBody&gt; body;            // body     :剛体   | リスト
        protected IList&lt;IPXJoint&gt; joint;          // joint    :Joint  | リスト

        public MyPluginBaseForm()
        {
            InitializeComponent();
        }

        protected void Header(IPERunArgs args)
        {
            this.args = args;
            this.host = args.Host;
            this.builder = host.Builder;
            this.bd = host.Builder.SC;
            this.bdx = host.Builder.Pmx;
            this.connect = host.Connector;
            this.view = host.Connector.View.PMDView;
            this.pmx = connect.Pmx.GetCurrentState();
            this.header = pmx.Header;
            this.info = pmx.ModelInfo;
            this.vertex = pmx.Vertex;
            this.material = pmx.Material;
            this.bone = pmx.Bone;
            this.morph = pmx.Morph;
            this.node = pmx.Node;
            this.body = pmx.Body;
            this.joint = pmx.Joint;
        }

        protected void Footer()
        {
            connect.Pmx.Update(pmx);
            connect.Form.UpdateList(UpdateObject.All);
            connect.View.PMDView.UpdateModel();
            connect.View.PMDView.UpdateView();
        }

        public int[] FaceVtoFace(int facevertexidx)
        {
            int matfacesum = 0; //面数和
            int[] result = new int[] { -1, -1 };
            for (int i = 0; i &lt; material.Count; i++)
            {
                int check = matfacesum + material[i].Faces.Count;
                if (check * 3 &gt; facevertexidx)
                {
                    result[0] = i;
                    result[1] = facevertexidx / 3 - matfacesum;
                    break;
                }
                else
                {
                    matfacesum = check;
                }
            }

            return result;
        }

        public MatFace[] GetSelectedIPXFaces()
        {
            int[] si = view.GetSelectedFaceIndices();
            MatFace[] result = new MatFace[si.Length / 3];
            for (int i = 0; i &lt; si.Length / 3; i++)
            {
                int[] tmp = FaceVtoFace(si[i * 3]);
                result[i] = new MatFace(pmx, tmp[0], tmp[1]);
            }
            return result;
        }

        public class MatFace
        {
            public IPXMaterial Mat;
            public IPXFace Face;
            IPXPmx pmx;

            public MatFace(IPXPmx pmx, int i, int j)
            {
                this.Mat = pmx.Material[i];
                this.Face = pmx.Material[i].Faces[j];
                this.pmx = pmx;
            }
            public override string ToString()
            {
                IList&lt;IPXVertex&gt; vertex = pmx.Vertex;
                string vertexs = "(";
                vertexs += vertex.IndexOf(Face.Vertex1).ToString() + ", ";
                vertexs += vertex.IndexOf(Face.Vertex2).ToString() + ", ";
                vertexs += vertex.IndexOf(Face.Vertex3).ToString() + ")";
                return Mat.Name + "の" + Mat.Faces.IndexOf(Face) + "番目, " + vertexs;
            }
        }
    }

partial class MyPluginBaseForm
    {
        /// &lt;summary&gt;
        /// 必要なデザイナー変数です。
        /// &lt;/summary&gt;
        private System.ComponentModel.IContainer components = null;

        /// &lt;summary&gt;
        /// 使用中のリソースをすべてクリーンアップします。
        /// &lt;/summary&gt;
        /// &lt;param name="disposing"&gt;マネージ リソースが破棄される場合 true、破棄されない場合は false です。&lt;/param&gt;
        protected override void Dispose(bool disposing)
        {
            if (disposing &amp;&amp; (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows フォーム デザイナーで生成されたコード

        /// &lt;summary&gt;
        /// デザイナー サポートに必要なメソッドです。このメソッドの内容を
        /// コード エディターで変更しないでください。
        /// &lt;/summary&gt;
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.Text = "MyPluginBaseForm";
        }

        #endregion
    }

public partial class Form1 : MyPluginBaseForm
    {
        Bitmap canvas;
        Graphics g;
        MatFace[] selected;

        public Form1(IPERunArgs args)
        {
            InitializeComponent();
            Header(args);            
            string dir = Path.GetDirectoryName(@pmx.FilePath);
            System.Environment.CurrentDirectory = dir;

            selected = GetSelectedIPXFaces();
            ReSetcomboBox1Items();
        }

        void ReSetcomboBox1Items()
        {
            comboBox1.Items.Clear();
            int i = 0;
            foreach (IPXMaterial m in pmx.Material)
            {
                this.comboBox1.Items.Add(i.ToString() + " : " + m.Name);
                i++;
            } 
        }
        void SetCamvasSize(int idx)
        {
            string mtex     =   pmx.Material[idx].Tex;
            label4.Text = mtex;
            if (mtex == "")
            {
                PictureBox1.Size = new Size(512,512);
                PictureBox1.Image = new Bitmap(512, 512);
                PictureBox1.BackgroundImage = new Bitmap(512, 512);
                WidthBox.Text = "512";
                HeightBox.Text = "512";
            }

            else
            {
                FileStream fs;
                fs = new FileStream(mtex, FileMode.Open, FileAccess.Read);
                if (Path.GetExtension(mtex) == ".tga")
                {
                    int[] size = Tga_Size(fs);
                    PictureBox1.Size = new Size(size[0], size[1]);
                    PictureBox1.Image = new Bitmap(size[0], size[1]);
                    WidthBox.Text = size[0].ToString();
                    HeightBox.Text = size[1].ToString();
                }

                else if (Path.GetExtension(mtex) == ".dds")
                {
                    int[] size = Dds_Size(fs);
                    PictureBox1.Size = new Size(size[0], size[1]);
                    PictureBox1.Image = new Bitmap(size[0],size[1]);
                    WidthBox.Text = size[0].ToString();
                    HeightBox.Text = size[1].ToString();
                }

                else
                {
                    Image image = System.Drawing.Image.FromStream(fs);
                    PictureBox1.Size = image.Size;
                    PictureBox1.Image = image;
                    WidthBox.Text = PictureBox1.Image.Width.ToString();
                    HeightBox.Text = PictureBox1.Image.Height.ToString();
                }
                fs.Close();
            }
        }
        void SetGraphic(IPXMaterial m, int width, int height)
        {
            canvas = new Bitmap(width, height);
            this.g = Graphics.FromImage(canvas);
            foreach (IPXFace f in m.Faces)
            {
                DrawTriAngle(f);
            }

            Pen pen = new Pen(panel2.BackColor);
            foreach (MatFace mf in selected)
            {
                if (mf.Mat == m)
                {
                    DrawTriAngle(mf.Face, pen);
                }
            }

            //リソースを解放する
            g.Dispose();

            //PictureBox1に表示する
            PictureBox1.Size = canvas.Size;
            PictureBox1.Image = canvas;
        }

        private PointF V2toPointF(V2 v2)
        {
            return new PointF(canvas.Width*v2.U,canvas.Height*v2.V);
        }

        public void DrawTriAngle(IPXFace f)
        {
            PointF[] ps = { V2toPointF(f.Vertex1.UV), V2toPointF(f.Vertex2.UV), V2toPointF(f.Vertex3.UV) };
            g.DrawPolygon(Pens.Black, ps);
            
        }

        public void DrawTriAngle(IPXFace f,Pen b)
        {
            PointF[] ps = { V2toPointF(f.Vertex1.UV), V2toPointF(f.Vertex2.UV), V2toPointF(f.Vertex3.UV) };
            g.DrawPolygon(b, ps);
        }

        public byte[] Pict_Size_FromBin(FileStream fs,int offset, int length)
        {
            byte[] result = new byte[length*2];
            fs.Seek(offset, SeekOrigin.Begin);
            fs.Read(result, 0, length*2);
            return result;
        }

        public int[] Tga_Size(FileStream fs)
        {
            byte[] size = Pict_Size_FromBin(fs, 12, 2);
            int[] result = new int[2];
            result[0] = BitConverter.ToUInt16(size, 0);
            result[1] = BitConverter.ToUInt16(size, 2);
            return result;
        }

        public int[] Dds_Size(FileStream fs)
        {
            byte[] size = Pict_Size_FromBin(fs, 12, 4);

            int[] result = new int[2];
            result[0] = (int)BitConverter.ToUInt32(size, 0);
            result[1] = (int)BitConverter.ToUInt32(size, 4);
            return result;
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            button1.Enabled = true;
            menuStrip1.Enabled = true;
            contextMenuStrip1.Enabled = true;
            int i=comboBox1.SelectedIndex;
            SetCamvasSize(i);
            SetGraphic(pmx.Material[i], PictureBox1.Width, PictureBox1.Height);
        }

        private void button1_Click(object sender, EventArgs e)
        {
            int height = int.Parse(HeightBox.Text);
            int width = int.Parse(WidthBox.Text);
            SetGraphic(pmx.Material[comboBox1.SelectedIndex], width, height);
        }

        private void 保存ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string saveFileName;

            saveFileDialog1.FileName = pmx.Material[comboBox1.SelectedIndex].Name + "_UV";
            saveFileDialog1.InitialDirectory = Path.GetDirectoryName(pmx.FilePath);
            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                saveFileName = saveFileDialog1.FileName;
            }
            else { return; }

            PictureBox1.Image.Save(saveFileName, System.Drawing.Imaging.ImageFormat.Png);
        }

        private void コピーToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Clipboard.SetDataObject(PictureBox1.Image, true);
        }

        private void panel2_MouseUp(object sender, MouseEventArgs e)
        {
            DialogResult ret = colorDialog1.ShowDialog();
            if (ret == DialogResult.OK)
            {
                panel2.BackColor = colorDialog1.Color;
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            int i = comboBox1.SelectedIndex;
            Header(args);
            string dir = Path.GetDirectoryName(@pmx.FilePath);
            System.Environment.CurrentDirectory = dir;
            selected = GetSelectedIPXFaces();
            ReSetcomboBox1Items();
            if (i &lt; material.Count)
            {
                comboBox1.SelectedIndex = i;
            }
            else { comboBox1.SelectedIndex = 0; }
        }


    }

partial class Form1
    {
        /// &lt;summary&gt;
        /// 必要なデザイナー変数です。
        /// &lt;/summary&gt;
        private System.ComponentModel.IContainer components = null;

        /// &lt;summary&gt;
        /// 使用中のリソースをすべてクリーンアップします。
        /// &lt;/summary&gt;
        /// &lt;param name="disposing"&gt;マネージ リソースが破棄される場合 true、破棄されない場合は false です。&lt;/param&gt;
        protected override void Dispose(bool disposing)
        {
            if (disposing &amp;&amp; (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows フォーム デザイナーで生成されたコード

        /// &lt;summary&gt;
        /// デザイナー サポートに必要なメソッドです。このメソッドの内容を
        /// コード エディターで変更しないでください。
        /// &lt;/summary&gt;
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.ファイルToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.保存ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.splitContainer1 = new System.Windows.Forms.SplitContainer();
            this.PictureBox1 = new System.Windows.Forms.PictureBox();
            this.contextMenuStrip1 = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.コピーToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.panel1 = new System.Windows.Forms.Panel();
            this.panel2 = new System.Windows.Forms.Panel();
            this.label4 = new System.Windows.Forms.Label();
            this.button1 = new System.Windows.Forms.Button();
            this.label3 = new System.Windows.Forms.Label();
            this.comboBox1 = new System.Windows.Forms.ComboBox();
            this.label1 = new System.Windows.Forms.Label();
            this.HeightBox = new System.Windows.Forms.TextBox();
            this.label2 = new System.Windows.Forms.Label();
            this.WidthBox = new System.Windows.Forms.TextBox();
            this.saveFileDialog1 = new System.Windows.Forms.SaveFileDialog();
            this.colorDialog1 = new System.Windows.Forms.ColorDialog();
            this.label5 = new System.Windows.Forms.Label();
            this.button2 = new System.Windows.Forms.Button();
            this.menuStrip1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer1)).BeginInit();
            this.splitContainer1.Panel1.SuspendLayout();
            this.splitContainer1.Panel2.SuspendLayout();
            this.splitContainer1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.PictureBox1)).BeginInit();
            this.contextMenuStrip1.SuspendLayout();
            this.panel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip1
            // 
            this.menuStrip1.Enabled = false;
            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.ファイルToolStripMenuItem});
            this.menuStrip1.Location = new System.Drawing.Point(0, 0);
            this.menuStrip1.Name = "menuStrip1";
            this.menuStrip1.Size = new System.Drawing.Size(585, 24);
            this.menuStrip1.TabIndex = 1;
            this.menuStrip1.Text = "menuStrip1";
            // 
            // ファイルToolStripMenuItem
            // 
            this.ファイルToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.保存ToolStripMenuItem});
            this.ファイルToolStripMenuItem.Name = "ファイルToolStripMenuItem";
            this.ファイルToolStripMenuItem.ShortcutKeyDisplayString = "";
            this.ファイルToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Alt | System.Windows.Forms.Keys.F)));
            this.ファイルToolStripMenuItem.Size = new System.Drawing.Size(51, 20);
            this.ファイルToolStripMenuItem.Text = "ファイル";
            // 
            // 保存ToolStripMenuItem
            // 
            this.保存ToolStripMenuItem.Name = "保存ToolStripMenuItem";
            this.保存ToolStripMenuItem.Size = new System.Drawing.Size(94, 22);
            this.保存ToolStripMenuItem.Text = "保存";
            this.保存ToolStripMenuItem.Click += new System.EventHandler(this.保存ToolStripMenuItem_Click);
            // 
            // splitContainer1
            // 
            this.splitContainer1.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
            this.splitContainer1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.splitContainer1.FixedPanel = System.Windows.Forms.FixedPanel.Panel2;
            this.splitContainer1.Location = new System.Drawing.Point(0, 24);
            this.splitContainer1.Name = "splitContainer1";
            // 
            // splitContainer1.Panel1
            // 
            this.splitContainer1.Panel1.AutoScroll = true;
            this.splitContainer1.Panel1.Controls.Add(this.PictureBox1);
            // 
            // splitContainer1.Panel2
            // 
            this.splitContainer1.Panel2.Controls.Add(this.panel1);
            this.splitContainer1.Size = new System.Drawing.Size(585, 384);
            this.splitContainer1.SplitterDistance = 384;
            this.splitContainer1.TabIndex = 4;
            // 
            // PictureBox1
            // 
            this.PictureBox1.BackColor = System.Drawing.SystemColors.Control;
            this.PictureBox1.ContextMenuStrip = this.contextMenuStrip1;
            this.PictureBox1.Location = new System.Drawing.Point(3, 3);
            this.PictureBox1.Name = "PictureBox1";
            this.PictureBox1.Size = new System.Drawing.Size(512, 512);
            this.PictureBox1.SizeMode = System.Windows.Forms.PictureBoxSizeMode.AutoSize;
            this.PictureBox1.TabIndex = 0;
            this.PictureBox1.TabStop = false;
            // 
            // contextMenuStrip1
            // 
            this.contextMenuStrip1.Enabled = false;
            this.contextMenuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.コピーToolStripMenuItem});
            this.contextMenuStrip1.Name = "contextMenuStrip1";
            this.contextMenuStrip1.Size = new System.Drawing.Size(98, 26);
            // 
            // コピーToolStripMenuItem
            // 
            this.コピーToolStripMenuItem.Enabled = false;
            this.コピーToolStripMenuItem.Name = "コピーToolStripMenuItem";
            this.コピーToolStripMenuItem.Size = new System.Drawing.Size(97, 22);
            this.コピーToolStripMenuItem.Text = "コピー";
            this.コピーToolStripMenuItem.Click += new System.EventHandler(this.コピーToolStripMenuItem_Click);
            // 
            // panel1
            // 
            this.panel1.Controls.Add(this.button2);
            this.panel1.Controls.Add(this.label5);
            this.panel1.Controls.Add(this.panel2);
            this.panel1.Controls.Add(this.label4);
            this.panel1.Controls.Add(this.button1);
            this.panel1.Controls.Add(this.label3);
            this.panel1.Controls.Add(this.comboBox1);
            this.panel1.Controls.Add(this.label1);
            this.panel1.Controls.Add(this.HeightBox);
            this.panel1.Controls.Add(this.label2);
            this.panel1.Controls.Add(this.WidthBox);
            this.panel1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.panel1.Location = new System.Drawing.Point(0, 0);
            this.panel1.Name = "panel1";
            this.panel1.Size = new System.Drawing.Size(193, 380);
            this.panel1.TabIndex = 8;
            // 
            // panel2
            // 
            this.panel2.BackColor = System.Drawing.Color.Red;
            this.panel2.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
            this.panel2.Location = new System.Drawing.Point(3, 191);
            this.panel2.Name = "panel2";
            this.panel2.Size = new System.Drawing.Size(183, 31);
            this.panel2.TabIndex = 9;
            this.panel2.MouseUp += new System.Windows.Forms.MouseEventHandler(this.panel2_MouseUp);
            // 
            // label4
            // 
            this.label4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(5, 237);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(48, 12);
            this.label4.TabIndex = 8;
            this.label4.Text = "テクスチャ";
            this.label4.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
            // 
            // button1
            // 
            this.button1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.button1.Enabled = false;
            this.button1.Location = new System.Drawing.Point(3, 336);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(189, 41);
            this.button1.TabIndex = 6;
            this.button1.Text = "指定のサイズで展開図を再描画";
            this.button1.UseVisualStyleBackColor = true;
            this.button1.Click += new System.EventHandler(this.button1_Click);
            // 
            // label3
            // 
            this.label3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label3.Location = new System.Drawing.Point(5, 311);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(56, 19);
            this.label3.TabIndex = 7;
            this.label3.Text = "縦";
            this.label3.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // comboBox1
            // 
            this.comboBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.comboBox1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboBox1.FormattingEnabled = true;
            this.comboBox1.Location = new System.Drawing.Point(69, 260);
            this.comboBox1.Name = "comboBox1";
            this.comboBox1.Size = new System.Drawing.Size(121, 20);
            this.comboBox1.TabIndex = 0;
            this.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);
            // 
            // label1
            // 
            this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label1.Location = new System.Drawing.Point(3, 260);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(58, 20);
            this.label1.TabIndex = 1;
            this.label1.Text = "対象材質";
            this.label1.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // HeightBox
            // 
            this.HeightBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.HeightBox.Location = new System.Drawing.Point(70, 311);
            this.HeightBox.Name = "HeightBox";
            this.HeightBox.Size = new System.Drawing.Size(120, 19);
            this.HeightBox.TabIndex = 5;
            // 
            // label2
            // 
            this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label2.Location = new System.Drawing.Point(3, 286);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(58, 19);
            this.label2.TabIndex = 2;
            this.label2.Text = "横";
            this.label2.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // WidthBox
            // 
            this.WidthBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.WidthBox.Location = new System.Drawing.Point(70, 286);
            this.WidthBox.Name = "WidthBox";
            this.WidthBox.Size = new System.Drawing.Size(120, 19);
            this.WidthBox.TabIndex = 3;
            // 
            // saveFileDialog1
            // 
            this.saveFileDialog1.DefaultExt = "png";
            this.saveFileDialog1.Filter = "png形式(*.png)|*.png|全て|*.*";
            // 
            // label5
            // 
            this.label5.AutoSize = true;
            this.label5.Location = new System.Drawing.Point(5, 173);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(63, 12);
            this.label5.TabIndex = 10;
            this.label5.Text = "選択面の色";
            // 
            // button2
            // 
            this.button2.Location = new System.Drawing.Point(3, 118);
            this.button2.Name = "button2";
            this.button2.Size = new System.Drawing.Size(183, 42);
            this.button2.TabIndex = 11;
            this.button2.Text = "現在のモデルの状態再読み込み";
            this.button2.UseVisualStyleBackColor = true;
            this.button2.Click += new System.EventHandler(this.button2_Click);
            // 
            // Form1
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 12F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(585, 408);
            this.Controls.Add(this.splitContainer1);
            this.Controls.Add(this.menuStrip1);
            this.MainMenuStrip = this.menuStrip1;
            this.Name = "Form1";
            this.Text = "UV展開図";
            this.menuStrip1.ResumeLayout(false);
            this.menuStrip1.PerformLayout();
            this.splitContainer1.Panel1.ResumeLayout(false);
            this.splitContainer1.Panel1.PerformLayout();
            this.splitContainer1.Panel2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer1)).EndInit();
            this.splitContainer1.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.PictureBox1)).EndInit();
            this.contextMenuStrip1.ResumeLayout(false);
            this.panel1.ResumeLayout(false);
            this.panel1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.MenuStrip menuStrip1;
        private System.Windows.Forms.ToolStripMenuItem ファイルToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem 保存ToolStripMenuItem;
        private System.Windows.Forms.SplitContainer splitContainer1;
        private System.Windows.Forms.PictureBox PictureBox1;
        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.TextBox HeightBox;
        private System.Windows.Forms.TextBox WidthBox;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.ComboBox comboBox1;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.Panel panel1;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.SaveFileDialog saveFileDialog1;
        private System.Windows.Forms.ContextMenuStrip contextMenuStrip1;
        private System.Windows.Forms.ToolStripMenuItem コピーToolStripMenuItem;
        private System.Windows.Forms.Panel panel2;
        private System.Windows.Forms.ColorDialog colorDialog1;
        private System.Windows.Forms.Button button2;
        private System.Windows.Forms.Label label5;
    }</FullCodeText>
  <CodeText>
// Run()関数内の処理を記述
// 外部クラスの活用などは一般形式のスクリプトコードを使用してください.

// プラグイン変数は IPERunArgs args を通して取得可能
// コードに自動的に追加されるヘッダ／フッタはメニューから有効化／確認が可能(ヘッダは標準で有効設定)


</CodeText>
  <CodeHeader>//
// ---- 簡易編集用ヘッダコード ----

// 常用接続変数一括登録

// ホスト配下
IPEPluginHost host = args.Host;
IPEBuilder builder = host.Builder;
IPEShortBuilder bd = host.Builder.SC;		// 短絡系ビルダ
IPXPmxBuilder bdx = host.Builder.Pmx;		// PMXビルダ
IPEConnector connect = host.Connector;
IPEPMDViewConnector view = host.Connector.View.PMDView;

// PMX関連

IPXPmx pmx = connect.Pmx.GetCurrentState();     // PMX取得
IPXHeader header = pmx.Header;                  // header   :ヘッダ
IPXModelInfo info = pmx.ModelInfo;              // info     :モデル情報
IList&lt;IPXVertex&gt; vertex = pmx.Vertex;           // vertex   :頂点   | リスト
IList&lt;IPXMaterial&gt; material = pmx.Material;     // material :材質   | リスト
IList&lt;IPXBone&gt; bone = pmx.Bone;                 // bone     :ボーン | リスト
IList&lt;IPXMorph&gt; morph = pmx.Morph;				// morph    :モーフ | リスト
IList&lt;IPXNode&gt; node = pmx.Node;					// node     :表示枠 | リスト
IList&lt;IPXBody&gt; body = pmx.Body;                 // body     :剛体   | リスト
IList&lt;IPXJoint&gt; joint = pmx.Joint;              // joint    :Joint  | リスト


/*
// PMD関連

IPEPmd pmd = connect.Pmd.GetCurrentState();         // PMD取得
// IPEXPmd pex = connect.Pmd.GetCurrentStateEx();       // 拡張PMDを使う場合はコメント解除(拡張用データへの接続変数は未登録)

IPEHeader header = pmd.Header;                  // header   :ヘッダ
IList&lt;IPEVertex&gt; vertex = pmd.Vertex;           // vertex   :頂点   | リスト
IList&lt;int&gt; face = pmd.Face;                     // face     :面     | リスト
IList&lt;IPEMaterial&gt; material = pmd.Material;     // material :材質   | リスト
IList&lt;IPEBone&gt; bone = pmd.Bone;                 // bone     :ボーン | リスト
IList&lt;IPEIK&gt; ik = pmd.IK;                       // ik       :IK     | リスト
IList&lt;IPEExpression&gt; exp = pmd.Expression;      // exp      :表情   | リスト

IList&lt;int&gt; frameExp = pmd.FrameExpression;      // frameExp :表情枠 | リスト
IList&lt;IPEFrameBone&gt; frameBone = pmd.FrameBone;  // frameBone:ボーン表示枠 | リスト

string[] toon = pmd.ToonName;                   // toon     :Toon   | 配列

IList&lt;IPEBody&gt; body = pmd.Body;                 // body     :剛体   | リスト
IList&lt;IPEJoint&gt; joint = pmd.Joint;              // joint    :Joint  | リスト
*/

</CodeHeader>
  <CodeFooter>//
// ---- 簡易編集用フッタコード ----

// 更新処理
// デフォルト設定ではフッタコードはOFF

// PMX更新
connect.Pmx.Update(pmx);

/*
// PMD更新
connect.Pmd.Update(pmd);
//connect.Pmd.UpdateEx(pex);
*/

// Form更新
connect.Form.UpdateList(UpdateObject.All);  // 重い場合は引数を変更して個別に更新

// PMDView更新
connect.View.PMDView.UpdateModel();         // Viewの更新が不要な場合はコメントアウト
connect.View.PMDView.UpdateView();


</CodeFooter>
  <EnableHeader>false</EnableHeader>
  <EnableFooter>false</EnableFooter>
  <ActivePages>0</ActivePages>
</CSScriptData>