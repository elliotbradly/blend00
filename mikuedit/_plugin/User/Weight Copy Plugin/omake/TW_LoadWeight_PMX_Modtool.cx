<?xml version="1.0"?>
<CSScriptData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ScriptType>CS1</ScriptType>
  <CompilerVersion>4</CompilerVersion>
  <ReferenceAssemblies>
    <string>System.dll</string>
    <string>System.Core.dll</string>
    <string>System.Data.dll</string>
    <string>System.Data.DataSetExtensions.dll</string>
    <string>System.Deployment.dll</string>
    <string>System.Drawing.dll</string>
    <string>System.Windows.Forms.dll</string>
    <string>System.Xml.dll</string>
    <string>System.Xml.Linq.dll</string>
    <string>Microsoft.CSharp.dll</string>
  </ReferenceAssemblies>
  <UsingText>using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using PEPlugin;
using PEPlugin.SDX;
using PEPlugin.Pmx;
using PEPlugin.Pmd;
using PEPlugin.Vmd;
using PEPlugin.Vme;
using PEPlugin.Form;
using PEPlugin.View;
using SlimDX;
using SlimDX.Direct3D9;
using IES = PEPlugin.Vme.IPEVmeEventState;
using IBS = PEPlugin.Vme.IPEVmeBoneState;
using ISS = PEPlugin.Vme.IPEVmeSingleValueState;
using IMS = PEPlugin.Vme.IPEVmeSingleValueState;
using ICS = PEPlugin.Vme.IPEVmeCameraState;
using ILS = PEPlugin.Vme.IPEVmeLightState;
</UsingText>
  <FullCodeText>using System.Text.RegularExpressions;

// using項目はメニューから一括管理(ここへの直接追記でも動作可能)
class WeightInfo {
	public V3 Pos;
	V3 Nml;
	IPXBone[] Bones;
	float[] Weights;
	bool SDEF;
	V3 SDEF_C;
	V3 SDEF_R0;
	V3 SDEF_R1;

	public WeightInfo (V3 pos, V3 nml, IPXBone[] bones, float[] weight, bool sdef, V3 c, V3 r0, V3 r1)
	{
		Set(pos, nml, bones, weight, sdef, c, r0, r1);
	}
	public WeightInfo (V3 pos, V3 nml, IPXBone[] bones, float[] weight)
	{
		Set(pos, nml, bones, weight, false, null, null, null);
	}
	void Set (V3 pos, V3 nml, IPXBone[] bones, float[] weight, bool sdef, V3 c, V3 r0, V3 r1)
	{
		Pos = pos;
		Nml = nml;
		Bones = bones;
		Weights = weight;
		SDEF = sdef;
		SDEF_C = c;
		SDEF_R0 = r0;
		SDEF_R1 = r1;
	}
	public void CopyWeight(IPXVertex dest)
	{
		dest.Bone1 = Bones[0];
		dest.Bone2 = Bones[1];
		dest.Bone3 = Bones[2];
		dest.Bone4 = Bones[3];

		dest.Weight1 = Weights[0];
		dest.Weight2 = Weights[1];
		dest.Weight3 = Weights[2];
		dest.Weight4 = Weights[3];

		dest.SDEF	 = SDEF;
		if(SDEF_C != null)  dest.SDEF_C	 = SDEF_C;
		if(SDEF_R0 != null) dest.SDEF_R0 = SDEF_R0;
		if(SDEF_R1 != null) dest.SDEF_R1 = SDEF_R1;
	}
}
// Scriptプラグインクラス(クラス名変更不可)
public class CSScriptClass : PEPluginClass
{
    // コンストラクタ
    public CSScriptClass() : base()
    {
        // 起動オプション
        // boot時実行(true/false), プラグインメニューへの登録(true/false), メニュー登録名("")
        m_option = new PEPluginOption(false, true, "ウェイト読込/設定(Modtool)");
    }

    // エントリポイント
    public override void Run(IPERunArgs args)
    {
        try {
			// 常用接続変数一括登録
			
			// ホスト配下
			IPEPluginHost host = args.Host;
			IPEBuilder builder = host.Builder;
			IPEShortBuilder bd = host.Builder.SC;		// 短絡系ビルダ
			IPXPmxBuilder bdx = host.Builder.Pmx;		// PMXビルダ
			IPEConnector connect = host.Connector;
			IPEPMDViewConnector view = host.Connector.View.PMDView;
			
			// PMX関連
			
			IPXPmx pmx = connect.Pmx.GetCurrentState();     // PMX取得
			IList&lt;IPXVertex&gt; vertex = pmx.Vertex;           // vertex   :頂点   | リスト
			IList&lt;IPXBone&gt; bone = pmx.Bone;                 // bone     :ボーン | リスト
			
			
			Func&lt;string, IPXBone&gt; GetBone = (string name) =&gt;
			{
				for (int i=0; i&lt;bone.Count; ++i) {
					if (Regex.Replace(bone[i].NameE, " ", "_") == name) return bone[i];
				}
				return null;
			};
			
			List&lt;WeightInfo&gt; weights = new List&lt;WeightInfo&gt;();
			
			// ファイルダイアログ表示
			using (OpenFileDialog dlg = new OpenFileDialog()) {
				dlg.Filter = "txt files (*.txt *.csv)|*.txt;*.csv|All files (*.*)|*.*";
			    if (dlg.ShowDialog() == DialogResult.OK) {
					// ファイル Open
			        string[] lines = File.ReadAllLines(dlg.FileName, Encoding.GetEncoding("shift_jis"));
					if(lines.Length == 0 || lines[0] != "Modtool Envelope Weight") {
						MessageBox.Show("互換性の無いウェイト情報です．");
						return;
					}

					for (int i=1; i&lt;lines.Length; ++i) {
						string[] elems = lines[i].Split(',');
						V3 p = new V3(float.Parse(elems[0]),
									  float.Parse(elems[1]),
									  -float.Parse(elems[2]));

						float[] w = new float[4];
						IPXBone[] b = new IPXBone[4];
						for (int j=0; j&lt;(elems.Length-3)/2 &amp;&amp; j&lt;4; ++j) {
							b[j] = GetBone(elems[3+j*2]);
							w[j] = float.Parse(elems[3+j*2+1])/100;
						}

						weights.Add(new WeightInfo(p, null, b, w));
					}
					int replaced = 0;
					foreach (int i in connect.View.PMDView.GetSelectedVertexIndices()) {
						WeightInfo nearest = null;
						float mindist = float.MaxValue;
						IPXVertex dest = vertex[i];
						for (int j=0; j&lt;weights.Count; ++j) {
							V3 pos = dest.Position;
							V3 dir = (pos-weights[j].Pos);
							float dist = dir.Length();
							if(dist &lt; mindist) {
								mindist = dist;
								nearest = weights[j];
							}
						}
						if (nearest != null) {
							nearest.CopyWeight(dest);
							++replaced;
						}
					}
					MessageBox.Show(replaced.ToString()+"個のWeightを変更しました");
					if (replaced != 0) {

						// PMX更新
						connect.Pmx.Update(pmx);
			
						/*
						// PMD更新
						connect.Pmd.Update(pmd);
						//connect.Pmd.UpdateEx(pex);
						*/
			
						// Form更新
						connect.Form.UpdateList(UpdateObject.All);  // 重い場合は引数を変更して個別に更新
			
						// PMDView更新
						connect.View.PMDView.UpdateModel();         // Viewの更新が不要な場合はコメントアウト
						connect.View.PMDView.UpdateView();
		
					}
				}
			}
			
        }
        catch (Exception ex) {
            MessageBox.Show(ex.Message, "エラー", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        }
    }
}
</FullCodeText>
  <CodeText>
// Run()関数内の処理を記述
// 外部クラスの活用などは一般形式のスクリプトコードを使用してください.

// プラグイン変数は IPERunArgs args を通して取得可能
// コードに自動的に追加されるヘッダ／フッタはメニューから有効化／確認が可能(ヘッダは標準で有効設定)


</CodeText>
  <CodeHeader>//
// ---- 簡易編集用ヘッダコード ----

// 常用接続変数一括登録

// ホスト配下
IPEPluginHost host = args.Host;
IPEBuilder builder = host.Builder;
IPEShortBuilder bd = host.Builder.SC;		// 短絡系ビルダ
IPXPmxBuilder bdx = host.Builder.Pmx;		// PMXビルダ
IPEConnector connect = host.Connector;
IPEPMDViewConnector view = host.Connector.View.PMDView;

// PMX関連

IPXPmx pmx = connect.Pmx.GetCurrentState();     // PMX取得
IPXHeader header = pmx.Header;                  // header   :ヘッダ
IPXModelInfo info = pmx.ModelInfo;              // info     :モデル情報
IList&lt;IPXVertex&gt; vertex = pmx.Vertex;           // vertex   :頂点   | リスト
IList&lt;IPXMaterial&gt; material = pmx.Material;     // material :材質   | リスト
IList&lt;IPXBone&gt; bone = pmx.Bone;                 // bone     :ボーン | リスト
IList&lt;IPXMorph&gt; morph = pmx.Morph;				// morph    :モーフ | リスト
IList&lt;IPXNode&gt; node = pmx.Node;					// node     :表示枠 | リスト
IList&lt;IPXBody&gt; body = pmx.Body;                 // body     :剛体   | リスト
IList&lt;IPXJoint&gt; joint = pmx.Joint;              // joint    :Joint  | リスト


/*
// PMD関連

IPEPmd pmd = connect.Pmd.GetCurrentState();         // PMD取得
// IPEXPmd pex = connect.Pmd.GetCurrentStateEx();       // 拡張PMDを使う場合はコメント解除(拡張用データへの接続変数は未登録)

IPEHeader header = pmd.Header;                  // header   :ヘッダ
IList&lt;IPEVertex&gt; vertex = pmd.Vertex;           // vertex   :頂点   | リスト
IList&lt;int&gt; face = pmd.Face;                     // face     :面     | リスト
IList&lt;IPEMaterial&gt; material = pmd.Material;     // material :材質   | リスト
IList&lt;IPEBone&gt; bone = pmd.Bone;                 // bone     :ボーン | リスト
IList&lt;IPEIK&gt; ik = pmd.IK;                       // ik       :IK     | リスト
IList&lt;IPEExpression&gt; exp = pmd.Expression;      // exp      :表情   | リスト

IList&lt;int&gt; frameExp = pmd.FrameExpression;      // frameExp :表情枠 | リスト
IList&lt;IPEFrameBone&gt; frameBone = pmd.FrameBone;  // frameBone:ボーン表示枠 | リスト

string[] toon = pmd.ToonName;                   // toon     :Toon   | 配列

IList&lt;IPEBody&gt; body = pmd.Body;                 // body     :剛体   | リスト
IList&lt;IPEJoint&gt; joint = pmd.Joint;              // joint    :Joint  | リスト
*/

</CodeHeader>
  <CodeFooter>//
// ---- 簡易編集用フッタコード ----

// 更新処理
// デフォルト設定ではフッタコードはOFF

// PMX更新
connect.Pmx.Update(pmx);

/*
// PMD更新
connect.Pmd.Update(pmd);
//connect.Pmd.UpdateEx(pex);
*/

// Form更新
connect.Form.UpdateList(UpdateObject.All);  // 重い場合は引数を変更して個別に更新

// PMDView更新
connect.View.PMDView.UpdateModel();         // Viewの更新が不要な場合はコメントアウト
connect.View.PMDView.UpdateView();


</CodeFooter>
  <EnableHeader>true</EnableHeader>
  <EnableFooter>true</EnableFooter>
  <ActivePages>0</ActivePages>
</CSScriptData>