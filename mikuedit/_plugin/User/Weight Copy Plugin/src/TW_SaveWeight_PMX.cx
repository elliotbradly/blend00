<?xml version="1.0"?>
<CSScriptData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ScriptType>CS1</ScriptType>
  <CompilerVersion>4</CompilerVersion>
  <ReferenceAssemblies>
    <string>System.dll</string>
    <string>System.Core.dll</string>
    <string>System.Data.dll</string>
    <string>System.Data.DataSetExtensions.dll</string>
    <string>System.Deployment.dll</string>
    <string>System.Drawing.dll</string>
    <string>System.Windows.Forms.dll</string>
    <string>System.Xml.dll</string>
    <string>System.Xml.Linq.dll</string>
    <string>Microsoft.CSharp.dll</string>
  </ReferenceAssemblies>
  <UsingText>using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using PEPlugin;
using PEPlugin.SDX;
using PEPlugin.Pmx;
using PEPlugin.Pmd;
using PEPlugin.Vmd;
using PEPlugin.Vme;
using PEPlugin.Form;
using PEPlugin.View;
using SlimDX;
using SlimDX.Direct3D9;
using IES = PEPlugin.Vme.IPEVmeEventState;
using IBS = PEPlugin.Vme.IPEVmeBoneState;
using ISS = PEPlugin.Vme.IPEVmeSingleValueState;
using IMS = PEPlugin.Vme.IPEVmeSingleValueState;
using ICS = PEPlugin.Vme.IPEVmeCameraState;
using ILS = PEPlugin.Vme.IPEVmeLightState;
</UsingText>
  <FullCodeText>
// using項目はメニューから一括管理(ここへの直接追記でも動作可能)

// Scriptプラグインクラス(クラス名変更不可)
public class CSScriptClass : PEPluginClass
{
    // コンストラクタ
    public CSScriptClass() : base()
    {
        // 起動オプション
        // boot時実行(true/false), プラグインメニューへの登録(true/false), メニュー登録名("")
        m_option = new PEPluginOption(false, true, "ウェイト保存(PMX)");
    }

    // エントリポイント
    public override void Run(IPERunArgs args)
    {
        try {
			// ホスト配下
			IPEPluginHost host = args.Host;
			IPEBuilder builder = host.Builder;
			IPEShortBuilder bd = host.Builder.SC;		// 短絡系ビルダ
			IPXPmxBuilder bdx = host.Builder.Pmx;		// PMXビルダ
			IPEConnector connect = host.Connector;
			IPEPMDViewConnector view = host.Connector.View.PMDView;
			
			// PMX関連
			
			IPXPmx pmx = connect.Pmx.GetCurrentState();     // PMX取得
			IPXHeader header = pmx.Header;                  // header   :ヘッダ
			IPXModelInfo info = pmx.ModelInfo;              // info     :モデル情報
			IList&lt;IPXVertex&gt; vertex = pmx.Vertex;           // vertex   :頂点   | リスト
			IList&lt;IPXMaterial&gt; material = pmx.Material;     // material :材質   | リスト
			IList&lt;IPXBone&gt; bone = pmx.Bone;                 // bone     :ボーン | リスト
			IList&lt;IPXMorph&gt; morph = pmx.Morph;				// morph    :モーフ | リスト
			IList&lt;IPXNode&gt; node = pmx.Node;					// node     :表示枠 | リスト
			IList&lt;IPXBody&gt; body = pmx.Body;                 // body     :剛体   | リスト
			IList&lt;IPXJoint&gt; joint = pmx.Joint;              // joint    :Joint  | リスト
			
			
			int nweight = 0;
			StringBuilder sb = new StringBuilder();

			sb.AppendLine("PMX Bone Weight");

			foreach (int id in connect.View.PMDView.GetSelectedVertexIndices()) {
				IPXVertex vtx	= vertex[id];
				V3 pos	= vtx.Position;
				V3 nml	= vtx.Normal;
				string[] bn	= {
					(vtx.Bone1 == null) ? "" : vtx.Bone1.Name,
					(vtx.Bone2 == null) ? "" : vtx.Bone2.Name,
					(vtx.Bone3 == null) ? "" : vtx.Bone3.Name,
					(vtx.Bone4 == null) ? "" : vtx.Bone4.Name
				};
				float[] w = {
					vtx.Weight1, vtx.Weight2, vtx.Weight3, vtx.Weight4
				};			
				bool sdef = vtx.SDEF;
				V3 sdef_c = vtx.SDEF_C;
				V3 sdef_r0 = vtx.SDEF_R0;
				V3 sdef_r1 = vtx.SDEF_R1;

				string line = string.Format(
					"{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23}",
					pos.X, pos.Y, pos.Z,
					nml.X, nml.Y, nml.Z,
					bn[0], bn[1], bn[2], bn[3],
					w[0], w[1], w[2], w[3],
					sdef,
					sdef_c.X, sdef_c.Y, sdef_c.Z,
					sdef_r0.X, sdef_r0.Y, sdef_r0.Z,
					sdef_r1.X, sdef_r1.Y, sdef_r1.Z);
			
				sb.AppendLine(line);
				++nweight;
			}
			
			// ファイルダイアログ表示
			using (SaveFileDialog dlg = new SaveFileDialog()) {
				dlg.Filter = "txt files (*.txt *.csv)|*.txt;*.csv|All files (*.*)|*.*";
			    if (dlg.ShowDialog() == DialogResult.OK) {
					// CSVファイルとして保存
			        File.WriteAllText(dlg.FileName, sb.ToString(), Encoding.GetEncoding("shift_jis"));
					MessageBox.Show(nweight.ToString()+"個のウェイトを保存しました");
			    }
			}
        }
        catch (Exception ex) {
            MessageBox.Show(ex.Message, "エラー", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        }
    }
}
</FullCodeText>
  <CodeText>
// Run()関数内の処理を記述
// 外部クラスの活用などは一般形式のスクリプトコードを使用してください.

// プラグイン変数は IPERunArgs args を通して取得可能
// コードに自動的に追加されるヘッダ／フッタはメニューから有効化／確認が可能(ヘッダは標準で有効設定)


</CodeText>
  <CodeHeader>//
// ---- 簡易編集用ヘッダコード ----

// 常用接続変数一括登録

// ホスト配下
IPEPluginHost host = args.Host;
IPEBuilder builder = host.Builder;
IPEShortBuilder bd = host.Builder.SC;		// 短絡系ビルダ
IPXPmxBuilder bdx = host.Builder.Pmx;		// PMXビルダ
IPEConnector connect = host.Connector;
IPEPMDViewConnector view = host.Connector.View.PMDView;

// PMX関連

IPXPmx pmx = connect.Pmx.GetCurrentState();     // PMX取得
IPXHeader header = pmx.Header;                  // header   :ヘッダ
IPXModelInfo info = pmx.ModelInfo;              // info     :モデル情報
IList&lt;IPXVertex&gt; vertex = pmx.Vertex;           // vertex   :頂点   | リスト
IList&lt;IPXMaterial&gt; material = pmx.Material;     // material :材質   | リスト
IList&lt;IPXBone&gt; bone = pmx.Bone;                 // bone     :ボーン | リスト
IList&lt;IPXMorph&gt; morph = pmx.Morph;				// morph    :モーフ | リスト
IList&lt;IPXNode&gt; node = pmx.Node;					// node     :表示枠 | リスト
IList&lt;IPXBody&gt; body = pmx.Body;                 // body     :剛体   | リスト
IList&lt;IPXJoint&gt; joint = pmx.Joint;              // joint    :Joint  | リスト


/*
// PMD関連

IPEPmd pmd = connect.Pmd.GetCurrentState();         // PMD取得
// IPEXPmd pex = connect.Pmd.GetCurrentStateEx();       // 拡張PMDを使う場合はコメント解除(拡張用データへの接続変数は未登録)

IPEHeader header = pmd.Header;                  // header   :ヘッダ
IList&lt;IPEVertex&gt; vertex = pmd.Vertex;           // vertex   :頂点   | リスト
IList&lt;int&gt; face = pmd.Face;                     // face     :面     | リスト
IList&lt;IPEMaterial&gt; material = pmd.Material;     // material :材質   | リスト
IList&lt;IPEBone&gt; bone = pmd.Bone;                 // bone     :ボーン | リスト
IList&lt;IPEIK&gt; ik = pmd.IK;                       // ik       :IK     | リスト
IList&lt;IPEExpression&gt; exp = pmd.Expression;      // exp      :表情   | リスト

IList&lt;int&gt; frameExp = pmd.FrameExpression;      // frameExp :表情枠 | リスト
IList&lt;IPEFrameBone&gt; frameBone = pmd.FrameBone;  // frameBone:ボーン表示枠 | リスト

string[] toon = pmd.ToonName;                   // toon     :Toon   | 配列

IList&lt;IPEBody&gt; body = pmd.Body;                 // body     :剛体   | リスト
IList&lt;IPEJoint&gt; joint = pmd.Joint;              // joint    :Joint  | リスト
*/

</CodeHeader>
  <CodeFooter>//
// ---- 簡易編集用フッタコード ----

// 更新処理
// デフォルト設定ではフッタコードはOFF

// PMX更新
connect.Pmx.Update(pmx);

/*
// PMD更新
connect.Pmd.Update(pmd);
//connect.Pmd.UpdateEx(pex);
*/

// Form更新
connect.Form.UpdateList(UpdateObject.All);  // 重い場合は引数を変更して個別に更新

// PMDView更新
connect.View.PMDView.UpdateModel();         // Viewの更新が不要な場合はコメントアウト
connect.View.PMDView.UpdateView();


</CodeFooter>
  <EnableHeader>true</EnableHeader>
  <EnableFooter>false</EnableFooter>
  <ActivePages>0</ActivePages>
</CSScriptData>